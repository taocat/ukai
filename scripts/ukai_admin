#!/usr/bin/env python

# Copyright 2014
# IIJ Innovation Institute Inc. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
# 
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the following
#   disclaimer in the documentation and/or other materials
#   provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY IIJ INNOVATION INSTITUTE INC. ``AS
# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
# SHALL IIJ INNOVATION INSTITUTE INC. OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
# OF SUCH DAMAGE.

import getopt
import json
import os
import sys

from libukai.ukai_config import UKAIConfig, UKAI_CONFIG_FILE_DEFAULT
from libukai.ukai_rpc import UKAIXMLRPCClient

class UKAIAdmin(object):
    def __init__(self, config):
        self._config = config
        self._rpc_client = UKAIXMLRPCClient(self._config)

    def diag(self, *params):
        self._rpc_client.call('ctl_diag', *params)

    def create_image(self, *params):
        def usage():
            print 'Usage: %s create_image [-s SIZE] [-b BLOCK_SIZE] [-l LOCATION] IMAGE_NAME' % os.path.basename(sys.argv[0])

        if len(params) < 1:
            usage()
            return -1

        str_size = None
        block_size = None
        location = None
        (optlist, args) = getopt.getopt(params, 's:b:l:h:')
        for opt_pair in optlist:
            if opt_pair[0] == '-s':
                str_size = opt_pair[1]
            if opt_pair[0] == '-b':
                block_size = int(opt_pair[1])
            if opt_pair[0] == '-l':
                location = opt_pair[1]
        if str_size is None:
            usage()
            return -1
        image_name = args[0]
        
        return self._rpc_client.call('ctl_create_image', image_name,
                                     str_size, block_size, location)

    def destroy_image(self, *params):
        return self._rpc_client.call('ctl_destroy_image', *params)

    def get_image_info(self, *params):
        if len(params) < 1:
            print ('Usage: %s get_image_info IMAGE_NAME'
                   % os.path.basename(sys.argv[0]))
            return -1
        ret, json_metadata = self._rpc_client.call(
            'ctl_get_metadata', *params)
        metadata = json.loads(json_metadata)
        name = metadata['name']
        size = metadata['size']
        used_size = metadata['used_size']
        block_size = metadata['block_size']
        blocks = metadata['blocks']

        print '''#
# Disk Metadata
#
name=%s
size=%d
block_size=%d''' % (name, size, block_size)

        location2index = {}
        index2location = []
        location_index = 0
        for idx in range(0, size / block_size):
            block = blocks[idx]
            for loc in block.keys():
                if loc in location2index:
                    continue
                location2index[loc] = location_index
                index2location.append(loc)
                location_index = location_index + 1
        print '''#
# Location Index
#'''
        for loc_idx in range(0, len(location2index)):
            print '%d=%s' % (loc_idx, index2location[loc_idx])

        print '''#
# Block Information
#
# block_index: location_index:sync_status
#   sync_status: 'Y' = In-sync, 'N' = Out-of-sync
#'''
        for idx in range(0, size / block_size):
            block = blocks[idx]
            print self._config.get('blockname_format') % idx, ':',
            for loc_idx in range(0, len(index2location)):
                loc = index2location[loc_idx]
                if loc in block.keys():
                    print '%d:%s' % (loc_idx,
                                     'Y' if block[loc]['sync_status'] == 0 else 'N'),
                else:
                    print '   ',
            print ''

        return 0

    def add_location(self, *params):
        if len(params) < 2:
            print ('Usage: %s add_location IMAGE_NAME LOCATION'
                   % os.path.basename(sys.argv[0]))
            return -1
        return self._rpc_client.call('ctl_add_location', *params)

    def remove_location(self, *params):
        if len(params) < 2:
            print ('Usage: %s remove_location IMAGE_NAME LOCATION'
                   % os.path.basename(sys.argv[0]))
            return -1
        return self._rpc_client.call('ctl_remove_location', *params)

    def synchronize(self, *params):
        if len(params) < 1:
            print 'Usage: %s synchronize [-s START_BLOCK] [-e END_BLOCK] [-v] IMAGE_NAME' % os.path.basename(sys.argv[0])
            return -1

        start = 0
        end = -1
        verbose = False
        (optlist, args) = getopt.getopt(params, 's:e:v')
        for opt_pair in optlist:
            if opt_pair[0] == '-s':
                start = int(opt_pair[1])
            if opt_pair[0] == '-e':
                end = int(opt_pair[1])
            if opt_pair[0] == '-v':
                verbose = True
        image_name = args[0]
        ret, json_metadata = self._rpc_client.call('ctl_get_metadata',
                                                   image_name)
        if json_metadata is None:
            return -1
        metadata = json.loads(json_metadata)
        nblocks = metadata['size'] / metadata['block_size']

        if (start < 0) or (end > nblocks - 1):
            print 'Block index out of range (must be 0 to %d)' % (nblocks - 1)
            return -1
        if (end != -1) and (end < start):
            print 'END_BLOCK must be greater or equal to START_BLOCK'
            return -1

        return self._rpc_client.call('ctl_synchronize', image_name,
                                     start, end, verbose)

    def get_image_names(self, *params):
        names = self._rpc_client.call('ctl_get_image_names', *params)
        for name in names:
            print name
        return 0

    """Get the available storage size on the specified node.
    The node can either be local or remote.
    The unit is K.
    """
    def get_available_storage(self, node):
        available = self._rpc_client.call('get_available_storage_remote', node)
        print(available)
        return 0

    def get_best_node(self, nodes):
        best_node = self._rpc_client.call('get_best_node', nodes)
        print(best_node)
        return 0

    def get_rtt_local(self, destination):
        rtt = self._rpc_client.call('get_rtt_local', destination)
        print(rtt)
        return 0

    def get_rtt_remote(self, node, destination):
        rtt = self._rpc_client.call('get_rtt_remote', node, destination)
        print(rtt)
        return 0


def usage():
    print '''Usage: %s [-s CORE_SERVER] [-p CORE_PORT] SUBCOMMAND [PARAMS]

SUBCOMMANDS:
    create_image: creates a virtual disk image
    destroy_image: destroies a virtual disk image
    get_metadata: prints metadata information of a virtual disk image
    add_location: adds a location to a virtual disk image
    remove_location: removes a location from a virtual disk image
    synchronize: synchronizes a virtual disk image among locations
''' % os.path.basename(sys.argv[0])

def main():
    if len(sys.argv) < 2:
        usage()
        sys.exit(-1)
    
    config = UKAIConfig(UKAI_CONFIG_FILE_DEFAULT)
    (optlist, args) = getopt.getopt(sys.argv[1:], 's:p:')
    for opt_pair in optlist:
        if opt_pair[0] == '-s':
            config.set('core_server', opt_pair[1])
        if opt_pair[0] == '-p':
            config.set('core_port', opt_pair[1])

    admin = UKAIAdmin(config)
    if not hasattr(admin, args[0]):
        usage()
        sys.exit(-1)

    return getattr(admin, args[0])(*args[1:])

if __name__ == '__main__':
    main()
